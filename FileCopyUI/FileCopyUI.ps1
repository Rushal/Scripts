<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2024 v5.8.241 (T)
     Generated on:       4/25/2024 2:03 PM
     Generated by:       Chuck
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2024
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-FileCopyUI_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try {
		[FolderBrowserModernDialog] | Out-Null
	}
	catch {
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formFileCopy = New-Object 'System.Windows.Forms.Form'
	$labelProgressBar = New-Object 'System.Windows.Forms.Label'
	$labelProgressBarBg = New-Object 'System.Windows.Forms.Label'
	$labelPercentage = New-Object 'System.Windows.Forms.Label'
	$labelDriveLetter = New-Object 'System.Windows.Forms.Label'
	$textboxDriveLetter = New-Object 'System.Windows.Forms.TextBox'
	$labelDiskSpace = New-Object 'System.Windows.Forms.Label'
	$buttonBrowseLogFolder = New-Object 'System.Windows.Forms.Button'
	$textboxLogFolder = New-Object 'System.Windows.Forms.TextBox'
	$buttonBrowseFinalDestFolder = New-Object 'System.Windows.Forms.Button'
	$textboxFinalDestFolder = New-Object 'System.Windows.Forms.TextBox'
	$buttonBrowseDestFolder = New-Object 'System.Windows.Forms.Button'
	$textboxDestFolder = New-Object 'System.Windows.Forms.TextBox'
	$buttonBrowseSourceFolder = New-Object 'System.Windows.Forms.Button'
	$textboxSourceFolder = New-Object 'System.Windows.Forms.TextBox'
	$buttonDEBUG = New-Object 'System.Windows.Forms.Button'
	$textboxRobocopyArgs = New-Object 'System.Windows.Forms.TextBox'
	$labelRobCopyArgs = New-Object 'System.Windows.Forms.Label'
	$statusPanel = New-Object 'System.Windows.Forms.Panel'
	$labelFinalDestFolder = New-Object 'System.Windows.Forms.Label'
	$checkboxOffloadingToDisk = New-Object 'System.Windows.Forms.CheckBox'
	$textboxThreads = New-Object 'System.Windows.Forms.TextBox'
	$labelThreads = New-Object 'System.Windows.Forms.Label'
	$textboxScanTime = New-Object 'System.Windows.Forms.TextBox'
	$labelScanFoldersec = New-Object 'System.Windows.Forms.Label'
	$buttonStop = New-Object 'System.Windows.Forms.Button'
	$buttonStart = New-Object 'System.Windows.Forms.Button'
	$textboxLogAge = New-Object 'System.Windows.Forms.TextBox'
	$labelLogFileAgeday = New-Object 'System.Windows.Forms.Label'
	$labelLogFolder = New-Object 'System.Windows.Forms.Label'
	$labelDestinationFolder = New-Object 'System.Windows.Forms.Label'
	$labelSourceFolder = New-Object 'System.Windows.Forms.Label'
	$tooltips = New-Object 'System.Windows.Forms.ToolTip'
	$folderbrowsermoderndialogSource = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$folderbrowsermoderndialogDest = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$folderbrowsermoderndialogFinalDest = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$folderbrowsermoderndialogLogs = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	# ICON CREDIT: https://www.flaticon.com/free-icon/files_2581104?term=file+copy&page=1&position=18&origin=search&related_id=2581104
	#region Variables
	$global:runningJobs = @()
	$global:runningJobExpectedCount = 1
	$global:debugLogFile = "debug.log"
	$global:savedValuesFile = "C:\ProgramData\AtxFileCopy\values.xml"
	[System.Environment]::SetEnvironmentVariable('robocopyProcessId', "", 'User')
	#endregion
	
	#region Functions
	function Start-RoboCopyJob ([string]$sourceDir, [string]$destDir, [string]$options, [string]$logFile, [int]$threads, [int]$delay) {
		$job = Start-Job {
			param ($sourceDir, $destinationDir, $options, $logFile, $threads, $delay)
			
			while ($true) {
				if ($isRunning) {
					$isStillRunning = Get-Process -Id $processID -ea silentlycontinue
					
					if (-not ($isStillRunning)) {
						$process = $null
						$processID = $null
						$isRunning = $false
						[System.Environment]::SetEnvironmentVariable('robocopyProcessId', "", 'User')
					}
				}			
				
				if ((Get-ChildItem $sourceDir -File -Recurse) -and -not ($processID)) {
					$process = Start-Process Robocopy -ArgumentList "`"$sourceDir`" `"$destinationDir`" $options /MT:$threads /log+:`"$logFile`"" -WindowStyle Hidden -PassThru
					
					$processID = $process.id
					[System.Environment]::SetEnvironmentVariable('robocopyProcessId', "$processID", 'User')
					$isRunning = $true
						
					Start-Sleep -Seconds $delay
				}
			}
		} -ArgumentList $sourceDir, $destDir, $options, $logFile, $threads, $delay
		
		$global:runningJobs += @($job)
		
		<#
		[System.Windows.Forms.MessageBox]::Show(
			"$(Get-Job)`n
				$sourceDir`n
				$destDir`n
				$options`n
				$logFile`n
				$threads`n
				$delay`n"
			 , "DEBUG"
		)
		#>
	}
	
	function Get-RobocopyProcessID () {	
		return [System.Environment]::GetEnvironmentVariable('robocopyProcessId', 'User')
	}
	
	function Stop-RobocopyProcess($id) {
		$process = Get-Process -Id $id -ErrorAction SilentlyContinue
		if ($process) {
			Stop-Process -Id $id -Force
		}
		[System.Environment]::SetEnvironmentVariable('robocopyProcessId', "", 'User')
	}
	
	function UpdateDiskSpace {	
		if ($errorprovider1.GetError($textboxDriveLetter) -ne "") {
			$diskInfo = Get-WmiObject Win32_LogicalDisk | Where-Object { $_.DeviceID -match 'C' }
		}
		else {
			$diskInfo = Get-WmiObject Win32_LogicalDisk | Where-Object { $_.DeviceID -match $textboxDriveLetter.Text }
		}
		
		$usedSpacePercent = ($diskInfo.Size - $diskInfo.FreeSpace) / $diskInfo.Size * 100
		
		#$progressbar1.Value = [math]::Round($usedSpacePercent)
		$totalWidth = $labelProgressBarBg.Width
		$newWidth = [math]::Round(($usedSpacePercent / 100) * $totalWidth)
		$labelProgressBar.Width = $newWidth
		
		$percentageText = [math]::Round($usedSpacePercent, 2).ToString() + "%"
		$labelPercentage.Text = $percentageText
			
		# Set color based on used space percentage
		if ($usedSpacePercent -lt 50) {
			$labelProgressBar.BackColor = [System.Drawing.Color]::Green
			#$progressbar1.ForeColor = [System.Drawing.Color]::Green
		}
		elseif ($usedSpacePercent -lt 85) {
			$labelProgressBar.BackColor = [System.Drawing.Color]::Yellow
			#$progressbar1.ForeColor = [System.Drawing.Color]::Yellow
		}
		else {
			$labelProgressBar.BackColor = [System.Drawing.Color]::Red
			#$progressbar1.ForeColor = [System.Drawing.Color]::Red
		}
		
		$labelProgressBar.BringToFront()
	}
	
	# Validation
	function Validate-IsEmptyTrim ([string]$text) {
		<#
			.SYNOPSIS
				Validates if input is empty (ignores spaces).
		
			.DESCRIPTION
				Validates if input is empty (ignores spaces).
		
			.PARAMETER  Text
				A string containing an IP address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		if ($text -eq $null -or $text.Trim().Length -eq 0) {
			return $true
		}
		
		return $false
	}
	
	function Validate-IsPositiveInt ($text, [int]$maxNumber = 0) {
		$value = $text.Trim() -as [int]
			
		if ($value -ge 1 -and $text -eq $value) {
			if ($maxNumber -gt 0 -and $value -gt $maxNumber) {
				return $false		
			}
			return $true
		}
		return $false
	}
	
	function Validate-IsPath ([string]$text) {
		$path = $text.Trim()
		
		# Check if the path exists and is accessible
		if (Test-Path -LiteralPath "$path" -PathType Container) {
			return $true
		}
		
		return $false
	}
	
	function Validate-IsFile ([string]$text) {
		$file = $text.Trim()
		
		# Check if the path exists and is accessible
		if (Test-Path -LiteralPath "$file" -PathType Leaf) {
			return $true
		}
		
		return $false
	}
	
	function Validate-IsDisk ([string]$text) {
		$deviceId = Get-WmiObject Win32_LogicalDisk | Where-Object { $_.DeviceID -match $text.Trim() }
		
		# Check if the path exists and is accessible
		if ($deviceId) {
			return $true
		}
		
		return $false
	}
	
	function Validate-RoboCopyOptions ($text) {
		$options = $text.Trim()
		
		if ($options -match "/mt" -or $options -match "/log") {
			return $false
		}
		
		return $true
	}
	
	function Test-IsValidPath {
		[CmdletBinding()]
		Param (
			[Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
			[string]$Path,
			[switch]$MustExist
		)
		# test for invalid characters
		if ($Path.Trim().Length -eq 0) { return $false }
		if ($Path.IndexOfAny([System.IO.Path]::GetInvalidPathChars()) -ge 0) { return $false }
		# if the path should exist
		if ($MustExist) { return (Test-Path -LiteralPath $Path) }
		
		return $true
	}
	
	function DebugAndLogCleanup {
		$debugLogPath = $textboxLogFolder.Text.Trim()
		$debugLogFilename = [System.IO.Path]::GetFileName("$($global:debugLogFile)")
		$debugLogExt = [System.IO.Path]::GetExtension("$($global:debugLogFile)")
		$debugFullPath = "$debugLogPath\$debugLogFilename"
		
		#[System.Windows.Forms.MessageBox]::Show("$debugLogPath", "DEBUG")
		
		if (-not (Test-Path -Path "$debugFullPath")) {
			New-Item -ItemType File -Path "$debugLogPath" -Name $debugLogFilename -Force
		}
		else {
			# Do some cleanup. If the files are older than the specified file age, delete them
			$logFiles = Get-ChildItem $debugLogPath -Filter "*$debugLogExt" | Where-Object LastWriteTime -LT (Get-Date).AddDays(-1 * $textboxLogAge.Text.Trim())
			
			#[System.Windows.Forms.MessageBox]::Show("$logFiles", "DEBUG")
			
			foreach ($logFile in $logFiles) {
				Remove-Item -Path $logFile.FullName
			}
		}
	}
	
	function Get-DebugLogFullPath {
		$debugLogPath = $textboxLogFolder.Text.Trim()
		$debugLogFilename = [System.IO.Path]::GetFileName("$($global:debugLogFile)")
		$debugFullPath = "$debugLogPath\$debugLogFilename"
		
		return $debugFullPath
	}
	
	# Save fields
	function Save-GUIValues {
		if (-not (Test-Path -Path "$($global:savedValuesFile)")) {
			$savedFilePath = [IO.Path]::GetDirectoryName("$($global:savedValuesFile)")
			$savedFilename = [System.IO.Path]::GetFileName("$($global:savedValuesFile)")
			New-Item -ItemType File -Path $savedFilePath -Name $savedFilename -Force
		}
		
		$values = @{
			SourcePath    = $textboxSourceFolder.Text
			DestPath      = $textboxDestFolder.Text
			OffloadToDisk = $checkboxOffloadingToDisk.Checked
			FinalDestPath	= $textboxFinalDestFolder.Text
			Threads       = $textboxThreads.Text
			RoboCopyArgs  = $textboxRobocopyArgs.Text
			WaitTime      = $textboxScanTime.Text
			RoboCopyLog   = $textboxLogFolder.Text
			LogAge        = $textboxLogAge.Text
			DriveLetter   = $textboxDriveLetter.Text
			WindowLeft    = $formFileCopy.Left
			WindowTop     = $formFileCopy.Top
		}
		
		$values | Export-Clixml -Path "$($global:savedValuesFile)"
		# Or: $values | ConvertTo-Json | Out-File "C:\GUIData.json"  # JSON example
	}
	
	function Load-GUIValues {
		if ((Test-Path -Path "$($global:savedValuesFile)")) {
			$values = Import-Clixml -Path "$($global:savedValuesFile)" -ErrorAction SilentlyContinue
			if ($null -eq (Get-Content "$($global:savedValuesFile)")) { continue }
			# Or: $values = Get-Content "C:\GUIData.json" | ConvertFrom-Json  # JSON example
			
			$textboxSourceFolder.Text = $values.SourcePath
			$textboxDestFolder.Text = $values.DestPath
			$checkboxOffloadingToDisk.Checked = $values.OffloadToDisk
			$textboxFinalDestFolder.Text = $values.FinalDestPath
			$textboxThreads.Text = $values.Threads
			$textboxRobocopyArgs.Text = $values.RoboCopyArgs
			$textboxScanTime.Text = $values.WaitTime
			$textboxLogFolder.Text = $values.RoboCopyLog
			$textboxLogAge.Text = $values.LogAge
			$textboxDriveLetter.Text = $values.DriveLetter
			$formFileCopy.Left = $values.WindowLeft
			$formFileCopy.Top = $values.WindowTop
		}
	}
	
	#endregion
	
	$formFileCopy_Load = {
		$textboxFinalDestFolder.Enabled = $false
		$statusPanel.BackColor = "Red"
		$buttonStop.Enabled = $false
		
		Load-GUIValues
		DebugAndLogCleanup
		UpdateDiskSpace
		
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = 60000 # in milliseconds
		$timer.add_Tick({ UpdateDiskSpace })
		$timer.Start()
		
		$formFileCopy.ValidateChildren()
	}
	
	$formFileCopy_FormClosed = [System.Windows.Forms.FormClosedEventHandler] {
		Save-GUIValues
		if (Get-RobocopyProcessID) { Stop-RobocopyProcess(Get-RobocopyProcessID) }
	}
	
	#region Field Validation
	$textboxSourceFolder_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Test-IsValidPath $textboxSourceFolder.Text
		#[System.Windows.Forms.MessageBox]::Show("$result", "DEBUG")
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxSourceFolder, "Please choose a source folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxSourceFolder, "");
		}
	}
	
	$textboxSourceFolder_TextChanged = {
		$result = Test-IsValidPath $textboxSourceFolder.Text
		#[System.Windows.Forms.MessageBox]::Show("$result", "DEBUG")
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxSourceFolder, "Please choose a source folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxSourceFolder, "");
		}
	}
	
	$textboxDestFolder_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Test-IsValidPath $textboxDestFolder.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxDestFolder, "Please choose a destination folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxDestFolder, "");
		}
	}
	
	$textboxDestFolder_TextChanged = {
		$result = Test-IsValidPath $textboxDestFolder.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxDestFolder, "Please choose a destination folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxDestFolder, "");
		}
	}
	
	$textboxFinalDestFolder_Validating = [System.ComponentModel.CancelEventHandler] {
		if ($checkboxOffloadingToDisk.Checked) {
			$result = Test-IsValidPath $textboxFinalDestFolder.Text
			if ($result -eq $false) {
				$errorprovider1.SetError($textboxFinalDestFolder, "Please choose a final destination folder.");
				$script:validationFailed = $true		
   }
			else {
				$errorprovider1.SetError($textboxFinalDestFolder, "");
			}
		}
	}
	
	$textboxFinalDestFolder_TextChanged = {
		$result = Test-IsValidPath $textboxFinalDestFolder.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxFinalDestFolder, "Please choose a final destination folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxFinalDestFolder, "");
		}
	}
	
	$textboxThreads_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Validate-IsPositiveInt $textboxThreads.Text 128
		
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxThreads, "Please choose a number between 1 and 128.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxThreads, "");
		}
	}
	
	$textboxRobocopyArgs_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Validate-RoboCopyOptions $textboxRobocopyArgs.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxRobocopyArgs, "Please remove options: /mt and /log and try again.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxRobocopyArgs, "");
		}
	}
	
	$textboxRobocopyArgs_TextChanged = {
		$result = Validate-RoboCopyOptions $textboxRobocopyArgs.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxRobocopyArgs, "Please remove options: /mt and /log and try again.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxRobocopyArgs, "");
		}
	}
	
	$textboxScanTime_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Validate-IsPositiveInt $textboxScanTime.Text
		
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxScanTime, "Please choose a positive number.");
			$script:validationFailed = $true	
  }
		else {
			$errorprovider1.SetError($textboxScanTime, "");
		}
	}
	
	$textboxLogFolder_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Test-IsValidPath $textboxLogFolder.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxLogFolder, "Please choose a log folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxLogFolder, "");
		}
	}
	
	$textboxLogFolder_TextChanged = {
		$result = Test-IsValidPath $textboxLogFolder.Text
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxLogFolder, "Please choose a log folder.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxLogFolder, "");
		}
	}
	
	$textboxLogAge_Validating = [System.ComponentModel.CancelEventHandler] {
		$result = Validate-IsPositiveInt $textboxLogAge.Text
		
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxLogAge, "Please choose a positive number.");
			$script:validationFailed = $true	
  }
		else {
			$errorprovider1.SetError($textboxLogAge, "");
		}
	}
	
	$textboxDriveLetter_TextChanged = {
		$result = Validate-IsDisk $textboxDriveLetter.Text
		
		if ($result -eq $false) {
			$errorprovider1.SetError($textboxDriveLetter, "Please choose a drive letter that exists on this PC.");
			$script:validationFailed = $true
		}
		else {
			$errorprovider1.SetError($textboxDriveLetter, "");
			UpdateDiskSpace
		}
	}
	
	#endregion
	
	$openfiledialog1_FileOk = [System.ComponentModel.CancelEventHandler] {
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$checkboxOffloadingToDisk_CheckedChanged = {
		if ($checkboxOffloadingToDisk.Checked -eq $true) {
			$textboxFinalDestFolder.Enabled = $true
			$global:runningJobExpectedCount++
		}
		elseif ($checkboxOffloadingToDisk.Checked -eq $false) {
			$errorprovider1.SetError($textboxFinalDestFolder, "");
			$textboxFinalDestFolder.Enabled = $false
			$global:runningJobExpectedCount--
		}
		
		#[System.Windows.Forms.MessageBox]::Show("$($global:runningJobExpectedCount)`n $runningJobExpectedCount", "DEBUG")
	}
	
	$buttonStart_Click = {
		Save-GUIValues
		DebugAndLogCleanup
		
		# Validation
		$script:ValidationFailed = $false
		$formFileCopy.ValidateChildren()
		
		$errorMessages = @()
		if ($script:validationFailed) {
			$errorMessages += "Please fill in all missing fields."
		}
			
		<#
		if ($textboxSourceFolder.TextLength -eq 0 -or $textboxDestFolder.TextLength -eq 0) {
			$errorMessages += "Please choose a source and destination path."
		}
		
		if ($textboxFinalDestFolder.Enabled -and $textboxFinalDestFolder.TextLength -eq 0) {
			$errorMessages += "Please choose a final destination path."
		}
		#>
		
		if ($errorMessages.Count -gt 0 -or $script:validationErrorCount -gt 0) {
			[System.Windows.Forms.MessageBox]::Show(
				$errorMessages -join "`n",
				"ERROR: Missing Information"
			)
		}
		else {
			$logFile = "$($textboxLogFolder.Text.Trim())\robocopy_$(Get-Date -Format 'dd-MM-yyyy').log"
			Start-RoboCopyJob -sourceDir "$($textboxSourceFolder.Text.Trim())" `
				-destDir "$($textboxDestFolder.Text.Trim())" `
				-options "$($textboxRobocopyArgs.Text.Trim())" `
				-logFile "$logFile" `
				-threads "$($textboxThreads.Text.Trim())" `
				-delay "$($textboxScanTime.Text.Trim())"
			
			if ($textboxFinalDestFolder.Enabled) {
				$logFile = "$($textboxLogFolder.Text.Trim())\robocopy-finaldest_$(Get-Date -Format 'dd-MM-yyyy').log"
				Start-RoboCopyJob -sourceDir "$($textboxDestFolder.Text.Trim())" `
					-destDir "$($textboxFinalDestFolder.Text.Trim())" `
					-options "$($textboxRobocopyArgs.Text.Trim())" `
					-logFile "$logFile" `
					-threads "$($textboxThreads.Text.Trim())" `
					-delay "$($textboxScanTime.Text.Trim())"
			}
			
			$jobCount = Get-Job | Measure-Object | Select-Object -ExpandProperty Count
			if ($jobCount -eq $global:runningJobExpectedCount) {
				$buttonStart.Enabled = $false
				$statusPanel.BackColor = "Green"
				$buttonStop.Enabled = $true
			}
			else {
				[System.Windows.Forms.MessageBox]::Show("Please make sure all fields are properly filled out", "ERROR: Missing Data")
			}
		}
		<#
		[System.Windows.Forms.MessageBox]::Show(
			"$(Get-Job)`n
				$($textboxSourceFolder.Text.Trim())`n
				$($textboxDestFolder.Text.Trim())`n
				$($textboxRobocopyArgs.Text.Trim())`n
				$($textboxLogFile.Text.Trim())`n
				$($textboxScanTime.Text.Trim())`n"
			 , "DEBUG"
		)
		#>
		
	}
	
	$buttonStop_Click = {
		Save-GUIValues
		foreach ($job in $global:runningJobs) {
			$job | Remove-Job -Force
		}
		
		Stop-RobocopyProcess(Get-RobocopyProcessID)
		
		Start-Sleep -Seconds 2
		if ((Get-Job -State Running).Count -eq 0 -and -not(Get-Process robocopy -ea SilentlyContinue)) {
			$statusPanel.BackColor = "Red"
			$buttonStart.Enabled = $true
			$buttonStop.Enabled = $false
			$global:runningJobs = @()
		}
		
		#Get-Job | Out-GridView
	}
	
	$buttonBrowseLogFile_Click = {
		
		if ($openfiledialogLog.ShowDialog() -eq 'OK') {
			$textboxLogFile.Text = $openfiledialogLog.FileName
		}
	}
	
	$buttonBrowseSourceFolder_Click = {
		if ($folderbrowsermoderndialogSource.ShowDialog() -eq 'OK') {
			$textboxSourceFolder.Text = $folderbrowsermoderndialogSource.SelectedPath
		}
	}
	
	$buttonBrowseDestFolder_Click = {
		if ($folderbrowsermoderndialogDest.ShowDialog() -eq 'OK') {
			$textboxDestFolder.Text = $folderbrowsermoderndialogDest.SelectedPath
		}
	}
	
	$buttonBrowseFinalDestFolder_Click = {
		if ($folderbrowsermoderndialogFinalDest.ShowDialog() -eq 'OK') {
			$textboxFinalDestFolder.Text = $folderbrowsermoderndialogFinalDest.SelectedPath
		}
	}
	
	$buttonBrowseLogFolder_Click = {
		if ($folderbrowsermoderndialogLogs.ShowDialog() -eq 'OK') {
			$textboxLogFolder.Text = $folderbrowsermoderndialogLogs.SelectedPath
		}
	}
	
	
	$buttonDEBUG_Click = {
		DebugAndLogCleanup
		$debugLogFile = Get-DebugLogFullPath
	
		"DEBUG: VARIABLE: global:runningJobs: $($global:runningJobs)" >> $debugLogFile
		"DEBUG: Get-Job:" >> $debugLogFile
		Get-Job >> $debugLogFile
		"DEBUG: Recieve-Job:" >> $debugLogFile
		$global:runningJobs | Receive-Job -Keep *>&1 >> $debugLogFile
		"" >> $debugLogFile
		"DEBUG: Current Job Count: $(Get-Job | Measure-Object | Select-Object -ExpandProperty Count)" >> $debugLogFile
		"DEBUG: Expected Running Jobs: $($global:runningJobExpectedCount)" >> $debugLogFile
		"" >> $debugLogFile
		"DEBUG: Robocopy Process ID: $(Get-RobocopyProcessID)" >> $debugLogFile
		"" >> $debugLogFile
		"DEBUG: Timer: $($timer)" >> $debugLogFile
		"" >> $debugLogFile
		"----------------------------------------------------" >> $debugLogFile
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load =
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formFileCopy.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed =
	{
		#Remove all event handlers from the controls
		try {
			$textboxDriveLetter.remove_TextChanged($textboxDriveLetter_TextChanged)
			$buttonBrowseLogFolder.remove_Click($buttonBrowseLogFolder_Click)
			$textboxLogFolder.remove_TextChanged($textboxLogFolder_TextChanged)
			$textboxLogFolder.remove_Validating($textboxLogFolder_Validating)
			$buttonBrowseFinalDestFolder.remove_Click($buttonBrowseFinalDestFolder_Click)
			$textboxFinalDestFolder.remove_TextChanged($textboxFinalDestFolder_TextChanged)
			$textboxFinalDestFolder.remove_Validating($textboxFinalDestFolder_Validating)
			$buttonBrowseDestFolder.remove_Click($buttonBrowseDestFolder_Click)
			$textboxDestFolder.remove_TextChanged($textboxDestFolder_TextChanged)
			$textboxDestFolder.remove_Validating($textboxDestFolder_Validating)
			$buttonBrowseSourceFolder.remove_Click($buttonBrowseSourceFolder_Click)
			$textboxSourceFolder.remove_TextChanged($textboxSourceFolder_TextChanged)
			$textboxSourceFolder.remove_Validating($textboxSourceFolder_Validating)
			$buttonDEBUG.remove_Click($buttonDEBUG_Click)
			$textboxRobocopyArgs.remove_TextChanged($textboxRobocopyArgs_TextChanged)
			$textboxRobocopyArgs.remove_Validating($textboxRobocopyArgs_Validating)
			$checkboxOffloadingToDisk.remove_CheckedChanged($checkboxOffloadingToDisk_CheckedChanged)
			$textboxThreads.remove_Validating($textboxThreads_Validating)
			$textboxScanTime.remove_Validating($textboxScanTime_Validating)
			$buttonStop.remove_Click($buttonStop_Click)
			$buttonStart.remove_Click($buttonStart_Click)
			$textboxLogAge.remove_Validating($textboxLogAge_Validating)
			$formFileCopy.remove_FormClosed($formFileCopy_FormClosed)
			$formFileCopy.remove_Load($formFileCopy_Load)
			$formFileCopy.remove_Load($Form_StateCorrection_Load)
			$formFileCopy.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
		$formFileCopy.Dispose()
		$labelPercentage.Dispose()
		$labelDriveLetter.Dispose()
		$textboxDriveLetter.Dispose()
		$labelDiskSpace.Dispose()
		$buttonBrowseLogFolder.Dispose()
		$textboxLogFolder.Dispose()
		$buttonBrowseFinalDestFolder.Dispose()
		$textboxFinalDestFolder.Dispose()
		$buttonBrowseDestFolder.Dispose()
		$textboxDestFolder.Dispose()
		$buttonBrowseSourceFolder.Dispose()
		$textboxSourceFolder.Dispose()
		$buttonDEBUG.Dispose()
		$textboxRobocopyArgs.Dispose()
		$labelRobCopyArgs.Dispose()
		$statusPanel.Dispose()
		$labelFinalDestFolder.Dispose()
		$checkboxOffloadingToDisk.Dispose()
		$textboxThreads.Dispose()
		$labelThreads.Dispose()
		$textboxScanTime.Dispose()
		$labelScanFoldersec.Dispose()
		$buttonStop.Dispose()
		$buttonStart.Dispose()
		$textboxLogAge.Dispose()
		$labelLogFileAgeday.Dispose()
		$labelLogFolder.Dispose()
		$labelDestinationFolder.Dispose()
		$labelSourceFolder.Dispose()
		$tooltips.Dispose()
		$folderbrowsermoderndialogSource.Dispose()
		$folderbrowsermoderndialogDest.Dispose()
		$folderbrowsermoderndialogFinalDest.Dispose()
		$errorprovider1.Dispose()
		$folderbrowsermoderndialogLogs.Dispose()
		$labelProgressBarBg.Dispose()
		$labelProgressBar.Dispose()
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formFileCopy.SuspendLayout()
	$errorprovider1.BeginInit()
	#
	# formFileCopy
	#
	$formFileCopy.Controls.Add($labelProgressBar)
	$formFileCopy.Controls.Add($labelProgressBarBg)
	$formFileCopy.Controls.Add($labelPercentage)
	$formFileCopy.Controls.Add($labelDriveLetter)
	$formFileCopy.Controls.Add($textboxDriveLetter)
	$formFileCopy.Controls.Add($labelDiskSpace)
	$formFileCopy.Controls.Add($buttonBrowseLogFolder)
	$formFileCopy.Controls.Add($textboxLogFolder)
	$formFileCopy.Controls.Add($buttonBrowseFinalDestFolder)
	$formFileCopy.Controls.Add($textboxFinalDestFolder)
	$formFileCopy.Controls.Add($buttonBrowseDestFolder)
	$formFileCopy.Controls.Add($textboxDestFolder)
	$formFileCopy.Controls.Add($buttonBrowseSourceFolder)
	$formFileCopy.Controls.Add($textboxSourceFolder)
	$formFileCopy.Controls.Add($buttonDEBUG)
	$formFileCopy.Controls.Add($textboxRobocopyArgs)
	$formFileCopy.Controls.Add($labelRobCopyArgs)
	$formFileCopy.Controls.Add($statusPanel)
	$formFileCopy.Controls.Add($labelFinalDestFolder)
	$formFileCopy.Controls.Add($checkboxOffloadingToDisk)
	$formFileCopy.Controls.Add($textboxThreads)
	$formFileCopy.Controls.Add($labelThreads)
	$formFileCopy.Controls.Add($textboxScanTime)
	$formFileCopy.Controls.Add($labelScanFoldersec)
	$formFileCopy.Controls.Add($buttonStop)
	$formFileCopy.Controls.Add($buttonStart)
	$formFileCopy.Controls.Add($textboxLogAge)
	$formFileCopy.Controls.Add($labelLogFileAgeday)
	$formFileCopy.Controls.Add($labelLogFolder)
	$formFileCopy.Controls.Add($labelDestinationFolder)
	$formFileCopy.Controls.Add($labelSourceFolder)
	$formFileCopy.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
	$formFileCopy.AutoScaleMode = 'Font'
	$formFileCopy.ClientSize = New-Object System.Drawing.Size(620, 356)
	$formFileCopy.FormBorderStyle = 'FixedDialog'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (, [byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAEAAAABAAAPAwAAAG8bAAACAAABAAEAAAAAAAEAIABZGwAAFgAAAIlQTkcNChoK
AAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFvck5UAc+id5oAABsTSURBVHja7Z17WFT3mcdP
2m3T/Wu33efp7p/bfZ4mJmlaozWGiyapiUn7GNtG492YeosxmyYmJlF3veMdNSrMDIo3VBBRBlBR
QRBQEAS5zBkuETUqKAoCMyam26b13d97BhRvMDPgmTnn9+V5Ps+kFZg5h9/7+b2/23sUxYRfttwr
ysbjDcrKtBrFmlM/Pr64qSVFdREwJbcENwX1ghMCW6ra+naKs/W/Uitufi9FbVXsqks5UNqiLCBS
8GXyL9uxK0pMboOyZG+1Ysmuf3PD0Uv1O4oaKRWBIhPfCFRBZIrD1S/Z0fp98aok1riUZGcrgsS0
wZ/rCf6Vh2o4+IetP3rpyhcZFwkCkJrLgpV2p+tnaRVuxe50KymqG8FiyuDPa1Aikqo9wZ/pCX4I
ALRRJHjtQNV3j7EAxH8jaMwW/Ev2Vd/V80MA4AHZwDt21f1PLIBUFcMBs4357wt+CADcQ7Ng0gFn
s2eC0AEJGDv4c8SY/3DNQ4MfAgAP4KpgaFrVDSW5rFnZU9KCYDLkUh/3/AdEz3/s7jE/BAC8oFzw
VKrTpRw48zUCyohpf8Seqvsm/CAA4AO2ZPXG43bVreyvwsqAqdJ+CAB4OR/wqt3hUrIufovgMlPa
DwEAL9kh2saPUrEsaK60HwIAPiwN9uZlwZSKZgRa0K7zP2CHHwTgHXYBX/9+p36kOe+8tz+fl1/T
vHyvVD/fp8NZgo9SK28oyaWNCDYz9fwQgAgOESC5tS5y1LnoywY31erAGUHNFTedvuiiIzW+f+bs
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'))
	#endregion
	$formFileCopy.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$formFileCopy.Name = 'formFileCopy'
	$formFileCopy.Text = 'FileCopy'
	$formFileCopy.add_FormClosed($formFileCopy_FormClosed)
	$formFileCopy.add_Load($formFileCopy_Load)
	#
	# labelProgressBar
	#
	$labelProgressBar.BackColor = [System.Drawing.Color]::Green 
	$labelProgressBar.BorderStyle = 'FixedSingle'
	$labelProgressBar.FlatStyle = 'Popup'
	$labelProgressBar.Location = New-Object System.Drawing.Point(264, 257)
	$labelProgressBar.Name = 'labelProgressBar'
	$labelProgressBar.Size = New-Object System.Drawing.Size(194, 16)
	$labelProgressBar.TabIndex = 33
	#
	# labelProgressBarBg
	#
	$labelProgressBarBg.BackColor = [System.Drawing.Color]::LightGray 
	$labelProgressBarBg.BorderStyle = 'FixedSingle'
	$labelProgressBarBg.Location = New-Object System.Drawing.Point(264, 255)
	$labelProgressBarBg.Name = 'labelProgressBarBg'
	$labelProgressBarBg.Size = New-Object System.Drawing.Size(194, 20)
	$labelProgressBarBg.TabIndex = 32
	#
	# labelPercentage
	#
	$labelPercentage.Anchor = 'Right'
	$labelPercentage.BackColor = [System.Drawing.Color]::Transparent 
	$labelPercentage.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8.25', [System.Drawing.FontStyle]'Bold')
	$labelPercentage.Location = New-Object System.Drawing.Point(464, 255)
	$labelPercentage.Name = 'labelPercentage'
	$labelPercentage.RightToLeft = 'No'
	$labelPercentage.Size = New-Object System.Drawing.Size(61, 20)
	$labelPercentage.TabIndex = 31
	$labelPercentage.Text = '%'
	$labelPercentage.TextAlign = 'MiddleRight'
	#
	# labelDriveLetter
	#
	$labelDriveLetter.AutoSize = $True
	$labelDriveLetter.Location = New-Object System.Drawing.Point(40, 258)
	$labelDriveLetter.Name = 'labelDriveLetter'
	$labelDriveLetter.Size = New-Object System.Drawing.Size(65, 13)
	$labelDriveLetter.TabIndex = 30
	$labelDriveLetter.Text = 'Drive Letter:'
	#
	# textboxDriveLetter
	#
	$errorprovider1.SetIconAlignment($textboxDriveLetter, 'MiddleLeft')
	$textboxDriveLetter.Location = New-Object System.Drawing.Point(134, 255)
	$textboxDriveLetter.MaxLength = 1
	$textboxDriveLetter.Name = 'textboxDriveLetter'
	$textboxDriveLetter.Size = New-Object System.Drawing.Size(39, 20)
	$textboxDriveLetter.TabIndex = 14
	$textboxDriveLetter.Text = 'C'
	$textboxDriveLetter.add_TextChanged($textboxDriveLetter_TextChanged)
	#
	# labelDiskSpace
	#
	$labelDiskSpace.AutoSize = $True
	$labelDiskSpace.Location = New-Object System.Drawing.Point(193, 258)
	$labelDiskSpace.Name = 'labelDiskSpace'
	$labelDiskSpace.Size = New-Object System.Drawing.Size(65, 13)
	$labelDiskSpace.TabIndex = 27
	$labelDiskSpace.Text = 'Disk Space:'
	#
	# buttonBrowseLogFolder
	#
	$buttonBrowseLogFolder.Location = New-Object System.Drawing.Point(464, 199)
	$buttonBrowseLogFolder.Name = 'buttonBrowseLogFolder'
	$buttonBrowseLogFolder.Size = New-Object System.Drawing.Size(61, 23)
	$buttonBrowseLogFolder.TabIndex = 12
	$buttonBrowseLogFolder.Text = 'Browse...'
	$buttonBrowseLogFolder.UseVisualStyleBackColor = $True
	$buttonBrowseLogFolder.add_Click($buttonBrowseLogFolder_Click)
	#
	# textboxLogFolder
	#
	$textboxLogFolder.AutoCompleteMode = 'SuggestAppend'
	$textboxLogFolder.AutoCompleteSource = 'FileSystemDirectories'
	$errorprovider1.SetIconAlignment($textboxLogFolder, 'MiddleLeft')
	$textboxLogFolder.Location = New-Object System.Drawing.Point(134, 202)
	$textboxLogFolder.Name = 'textboxLogFolder'
	$textboxLogFolder.Size = New-Object System.Drawing.Size(324, 20)
	$textboxLogFolder.TabIndex = 11
	$textboxLogFolder.add_TextChanged($textboxLogFolder_TextChanged)
	$textboxLogFolder.add_Validating($textboxLogFolder_Validating)
	#
	# buttonBrowseFinalDestFolder
	#
	$buttonBrowseFinalDestFolder.Location = New-Object System.Drawing.Point(531, 90)
	$buttonBrowseFinalDestFolder.Name = 'buttonBrowseFinalDestFolder'
	$buttonBrowseFinalDestFolder.Size = New-Object System.Drawing.Size(61, 23)
	$buttonBrowseFinalDestFolder.TabIndex = 7
	$buttonBrowseFinalDestFolder.Text = 'Browse...'
	$buttonBrowseFinalDestFolder.UseVisualStyleBackColor = $True
	$buttonBrowseFinalDestFolder.add_Click($buttonBrowseFinalDestFolder_Click)
	#
	# textboxFinalDestFolder
	#
	$textboxFinalDestFolder.AutoCompleteMode = 'SuggestAppend'
	$textboxFinalDestFolder.AutoCompleteSource = 'FileSystemDirectories'
	$errorprovider1.SetIconAlignment($textboxFinalDestFolder, 'MiddleLeft')
	$textboxFinalDestFolder.Location = New-Object System.Drawing.Point(244, 92)
	$textboxFinalDestFolder.Name = 'textboxFinalDestFolder'
	$textboxFinalDestFolder.Size = New-Object System.Drawing.Size(281, 20)
	$textboxFinalDestFolder.TabIndex = 6
	$textboxFinalDestFolder.add_TextChanged($textboxFinalDestFolder_TextChanged)
	$textboxFinalDestFolder.add_Validating($textboxFinalDestFolder_Validating)
	#
	# buttonBrowseDestFolder
	#
	$buttonBrowseDestFolder.Location = New-Object System.Drawing.Point(531, 36)
	$buttonBrowseDestFolder.Name = 'buttonBrowseDestFolder'
	$buttonBrowseDestFolder.Size = New-Object System.Drawing.Size(61, 23)
	$buttonBrowseDestFolder.TabIndex = 4
	$buttonBrowseDestFolder.Text = 'Browse...'
	$buttonBrowseDestFolder.UseVisualStyleBackColor = $True
	$buttonBrowseDestFolder.add_Click($buttonBrowseDestFolder_Click)
	#
	# textboxDestFolder
	#
	$textboxDestFolder.AutoCompleteMode = 'SuggestAppend'
	$textboxDestFolder.AutoCompleteSource = 'FileSystemDirectories'
	$errorprovider1.SetIconAlignment($textboxDestFolder, 'MiddleLeft')
	$textboxDestFolder.Location = New-Object System.Drawing.Point(134, 38)
	$textboxDestFolder.Name = 'textboxDestFolder'
	$textboxDestFolder.Size = New-Object System.Drawing.Size(391, 20)
	$textboxDestFolder.TabIndex = 3
	$textboxDestFolder.add_TextChanged($textboxDestFolder_TextChanged)
	$textboxDestFolder.add_Validating($textboxDestFolder_Validating)
	#
	# buttonBrowseSourceFolder
	#
	$buttonBrowseSourceFolder.Location = New-Object System.Drawing.Point(531, 10)
	$buttonBrowseSourceFolder.Name = 'buttonBrowseSourceFolder'
	$buttonBrowseSourceFolder.Size = New-Object System.Drawing.Size(61, 23)
	$buttonBrowseSourceFolder.TabIndex = 2
	$buttonBrowseSourceFolder.Text = 'Browse...'
	$buttonBrowseSourceFolder.UseVisualStyleBackColor = $True
	$buttonBrowseSourceFolder.add_Click($buttonBrowseSourceFolder_Click)
	#
	# textboxSourceFolder
	#
	$textboxSourceFolder.AutoCompleteMode = 'SuggestAppend'
	$textboxSourceFolder.AutoCompleteSource = 'FileSystemDirectories'
	$errorprovider1.SetIconAlignment($textboxSourceFolder, 'MiddleLeft')
	$textboxSourceFolder.Location = New-Object System.Drawing.Point(134, 12)
	$textboxSourceFolder.Name = 'textboxSourceFolder'
	$textboxSourceFolder.Size = New-Object System.Drawing.Size(391, 20)
	$textboxSourceFolder.TabIndex = 1
	$textboxSourceFolder.add_TextChanged($textboxSourceFolder_TextChanged)
	$textboxSourceFolder.add_Validating($textboxSourceFolder_Validating)
	#
	# buttonDEBUG
	#
	$buttonDEBUG.Location = New-Object System.Drawing.Point(58, 320)
	$buttonDEBUG.Name = 'buttonDEBUG'
	$buttonDEBUG.Size = New-Object System.Drawing.Size(75, 23)
	$buttonDEBUG.TabIndex = 17
	$buttonDEBUG.Text = 'DEBUG'
	$buttonDEBUG.UseVisualStyleBackColor = $True
	$buttonDEBUG.add_Click($buttonDEBUG_Click)
	#
	# textboxRobocopyArgs
	#
	$errorprovider1.SetIconAlignment($textboxRobocopyArgs, 'MiddleLeft')
	$textboxRobocopyArgs.Location = New-Object System.Drawing.Point(134, 146)
	$textboxRobocopyArgs.Name = 'textboxRobocopyArgs'
	$textboxRobocopyArgs.Size = New-Object System.Drawing.Size(391, 20)
	$textboxRobocopyArgs.TabIndex = 9
	$textboxRobocopyArgs.Text = '/w:0 /r:1 /nfl'
	$textboxRobocopyArgs.add_TextChanged($textboxRobocopyArgs_TextChanged)
	$textboxRobocopyArgs.add_Validating($textboxRobocopyArgs_Validating)
	#
	# labelRobCopyArgs
	#
	$labelRobCopyArgs.AutoSize = $True
	$labelRobCopyArgs.Location = New-Object System.Drawing.Point(30, 149)
	$labelRobCopyArgs.Name = 'labelRobCopyArgs'
	$labelRobCopyArgs.Size = New-Object System.Drawing.Size(78, 13)
	$labelRobCopyArgs.TabIndex = 24
	$labelRobCopyArgs.Text = 'RobCopy Args:'
	#
	# statusPanel
	#
	$statusPanel.Location = New-Object System.Drawing.Point(-3, 285)
	$statusPanel.Name = 'statusPanel'
	$statusPanel.Size = New-Object System.Drawing.Size(625, 26)
	$statusPanel.TabIndex = 23
	#
	# labelFinalDestFolder
	#
	$labelFinalDestFolder.AutoSize = $True
	$labelFinalDestFolder.Location = New-Object System.Drawing.Point(134, 95)
	$labelFinalDestFolder.Name = 'labelFinalDestFolder'
	$labelFinalDestFolder.Size = New-Object System.Drawing.Size(89, 13)
	$labelFinalDestFolder.TabIndex = 22
	$labelFinalDestFolder.Text = 'Final Dest Folder:'
	$tooltips.SetToolTip($labelFinalDestFolder, 'Path to file share for Hicof processing')
	#
	# checkboxOffloadingToDisk
	#
	$checkboxOffloadingToDisk.AutoSize = $True
	$checkboxOffloadingToDisk.Cursor = 'Hand'
	$checkboxOffloadingToDisk.Location = New-Object System.Drawing.Point(134, 65)
	$checkboxOffloadingToDisk.Name = 'checkboxOffloadingToDisk'
	$checkboxOffloadingToDisk.Size = New-Object System.Drawing.Size(110, 17)
	$checkboxOffloadingToDisk.TabIndex = 5
	$checkboxOffloadingToDisk.Text = 'Offloading to Disk'
	$tooltips.SetToolTip($checkboxOffloadingToDisk, 'Use this if you are copying from RAM to HDD/SSD and then from HDD/SSD to the file share')
	$checkboxOffloadingToDisk.UseVisualStyleBackColor = $True
	$checkboxOffloadingToDisk.add_CheckedChanged($checkboxOffloadingToDisk_CheckedChanged)
	#
	# textboxThreads
	#
	$errorprovider1.SetIconAlignment($textboxThreads, 'MiddleLeft')
	$textboxThreads.Location = New-Object System.Drawing.Point(134, 120)
	$textboxThreads.Name = 'textboxThreads'
	$textboxThreads.Size = New-Object System.Drawing.Size(39, 20)
	$textboxThreads.TabIndex = 8
	$textboxThreads.Text = '16'
	$textboxThreads.add_Validating($textboxThreads_Validating)
	#
	# labelThreads
	#
	$labelThreads.AutoSize = $True
	$labelThreads.Location = New-Object System.Drawing.Point(59, 123)
	$labelThreads.Name = 'labelThreads'
	$labelThreads.Size = New-Object System.Drawing.Size(49, 13)
	$labelThreads.TabIndex = 18
	$labelThreads.Text = 'Threads:'
	$tooltips.SetToolTip($labelThreads, 'Number of RoboCopy threads')
	#
	# textboxScanTime
	#
	$errorprovider1.SetIconAlignment($textboxScanTime, 'MiddleLeft')
	$textboxScanTime.Location = New-Object System.Drawing.Point(134, 172)
	$textboxScanTime.Name = 'textboxScanTime'
	$textboxScanTime.Size = New-Object System.Drawing.Size(39, 20)
	$textboxScanTime.TabIndex = 10
	$textboxScanTime.Text = '1'
	$textboxScanTime.add_Validating($textboxScanTime_Validating)
	#
	# labelScanFoldersec
	#
	$labelScanFoldersec.AutoSize = $True
	$labelScanFoldersec.Location = New-Object System.Drawing.Point(15, 175)
	$labelScanFoldersec.Name = 'labelScanFoldersec'
	$labelScanFoldersec.Size = New-Object System.Drawing.Size(93, 13)
	$labelScanFoldersec.TabIndex = 16
	$labelScanFoldersec.Text = 'Scan Folder (sec):'
	$tooltips.SetToolTip($labelScanFoldersec, 'How often to try running RoboCopy')
	#
	# buttonStop
	#
	$buttonStop.Location = New-Object System.Drawing.Point(315, 321)
	$buttonStop.Name = 'buttonStop'
	$buttonStop.Size = New-Object System.Drawing.Size(75, 23)
	$buttonStop.TabIndex = 16
	$buttonStop.Text = 'Stop'
	$buttonStop.UseVisualStyleBackColor = $True
	$buttonStop.add_Click($buttonStop_Click)
	#
	# buttonStart
	#
	$buttonStart.Location = New-Object System.Drawing.Point(225, 321)
	$buttonStart.Name = 'buttonStart'
	$buttonStart.Size = New-Object System.Drawing.Size(75, 23)
	$buttonStart.TabIndex = 15
	$buttonStart.Text = 'Start'
	$buttonStart.UseVisualStyleBackColor = $True
	$buttonStart.add_Click($buttonStart_Click)
	#
	# textboxLogAge
	#
	$errorprovider1.SetIconAlignment($textboxLogAge, 'MiddleLeft')
	$textboxLogAge.Location = New-Object System.Drawing.Point(134, 229)
	$textboxLogAge.Name = 'textboxLogAge'
	$textboxLogAge.Size = New-Object System.Drawing.Size(39, 20)
	$textboxLogAge.TabIndex = 13
	$textboxLogAge.Text = '5'
	$textboxLogAge.add_Validating($textboxLogAge_Validating)
	#
	# labelLogFileAgeday
	#
	$labelLogFileAgeday.AutoSize = $True
	$labelLogFileAgeday.Location = New-Object System.Drawing.Point(13, 232)
	$labelLogFileAgeday.Name = 'labelLogFileAgeday'
	$labelLogFileAgeday.Size = New-Object System.Drawing.Size(95, 13)
	$labelLogFileAgeday.TabIndex = 12
	$labelLogFileAgeday.Text = 'Log File Age (day):'
	#
	# labelLogFolder
	#
	$labelLogFolder.AutoSize = $True
	$labelLogFolder.Location = New-Object System.Drawing.Point(45, 205)
	$labelLogFolder.Name = 'labelLogFolder'
	$labelLogFolder.Size = New-Object System.Drawing.Size(60, 13)
	$labelLogFolder.TabIndex = 11
	$labelLogFolder.Text = 'Log Folder:'
	#
	# labelDestinationFolder
	#
	$labelDestinationFolder.AutoSize = $True
	$labelDestinationFolder.Location = New-Object System.Drawing.Point(13, 41)
	$labelDestinationFolder.Name = 'labelDestinationFolder'
	$labelDestinationFolder.Size = New-Object System.Drawing.Size(95, 13)
	$labelDestinationFolder.TabIndex = 8
	$labelDestinationFolder.Text = 'Destination Folder:'
	#
	# labelSourceFolder
	#
	$labelSourceFolder.AutoSize = $True
	$labelSourceFolder.Location = New-Object System.Drawing.Point(29, 15)
	$labelSourceFolder.Name = 'labelSourceFolder'
	$labelSourceFolder.Size = New-Object System.Drawing.Size(76, 13)
	$labelSourceFolder.TabIndex = 5
	$labelSourceFolder.Text = 'Source Folder:'
	#
	# tooltips
	#
	#
	# folderbrowsermoderndialogSource
	#
	#
	# folderbrowsermoderndialogDest
	#
	#
	# folderbrowsermoderndialogFinalDest
	#
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formFileCopy
	#
	# folderbrowsermoderndialogLogs
	#
	$errorprovider1.EndInit()
	$formFileCopy.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formFileCopy.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formFileCopy.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formFileCopy.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formFileCopy.ShowDialog()

} #End Function

#Call the form
Show-FileCopyUI_psf | Out-Null
